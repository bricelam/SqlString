//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.AspNetCore.Analyzers {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.AspNetCore.Analyzers.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route &apos;{0}&apos; conflicts with another action route. An HTTP request that matches multiple routes results in an ambiguous match error. Fix the conflict by changing the route&apos;s pattern, HTTP method, or route constraints..
        /// </summary>
        internal static string Analyzer_AmbiguousActionRoute_Message {
            get {
                return ResourceManager.GetString("Analyzer_AmbiguousActionRoute_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route conflict detected between controller actions.
        /// </summary>
        internal static string Analyzer_AmbiguousActionRoute_Title {
            get {
                return ResourceManager.GetString("Analyzer_AmbiguousActionRoute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route &apos;{0}&apos; conflicts with another handler route. An HTTP request that matches multiple routes results in an ambiguous match error. Fix the conflict by changing the route&apos;s pattern, HTTP method, or route constraints..
        /// </summary>
        internal static string Analyzer_AmbiguousRouteHandlerRoute_Message {
            get {
                return ResourceManager.GetString("Analyzer_AmbiguousRouteHandlerRoute_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route conflict detected between route handlers.
        /// </summary>
        internal static string Analyzer_AmbiguousRouteHandlerRoute_Title {
            get {
                return ResourceManager.GetString("Analyzer_AmbiguousRouteHandlerRoute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; of type {1} has a BindAsync(...) method, but the return type is not ValueTask&lt;{1}&gt;. Consider implementing IBindableFromHttpContext&lt;{1}&gt; to enforce implementation..
        /// </summary>
        internal static string Analyzer_BindAsyncSignatureMustReturnValueTaskOfT_Message {
            get {
                return ResourceManager.GetString("Analyzer_BindAsyncSignatureMustReturnValueTaskOfT_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When implementing BindAsync(...) method, the return type must be ValueTask&lt;T&gt;.
        /// </summary>
        internal static string Analyzer_BindAsyncSignatureMustReturnValueTaskOfT_Title {
            get {
                return ResourceManager.GetString("Analyzer_BindAsyncSignatureMustReturnValueTaskOfT_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; argument should be annotated as optional or nullable to match route parameter.
        /// </summary>
        internal static string Analyzer_DetectMismatchedParameterOptionality_Message {
            get {
                return ResourceManager.GetString("Analyzer_DetectMismatchedParameterOptionality_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route parameter and argument optionality is mismatched.
        /// </summary>
        internal static string Analyzer_DetectMismatchedParameterOptionality_Title {
            get {
                return ResourceManager.GetString("Analyzer_DetectMismatchedParameterOptionality_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should be placed directly on the route handler lambda to be effective.
        /// </summary>
        internal static string Analyzer_DetectMisplacedLambdaAttribute_Message {
            get {
                return ResourceManager.GetString("Analyzer_DetectMisplacedLambdaAttribute_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not place attribute on method called by route handler lambda.
        /// </summary>
        internal static string Analyzer_DetectMisplacedLambdaAttribute_Title {
            get {
                return ResourceManager.GetString("Analyzer_DetectMisplacedLambdaAttribute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using WebApplicationBuilder.Configuration instead of {0}.
        /// </summary>
        internal static string Analyzer_DisallowConfigureAppConfigureHostBuilder_Message {
            get {
                return ResourceManager.GetString("Analyzer_DisallowConfigureAppConfigureHostBuilder_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest switching from using Configure methods to WebApplicationBuilder.Configuration.
        /// </summary>
        internal static string Analyzer_DisallowConfigureAppConfigureHostBuilder_Title {
            get {
                return ResourceManager.GetString("Analyzer_DisallowConfigureAppConfigureHostBuilder_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IActionResult instances should not be returned from a {0} Delegate parameter. Consider returning an equivalent result from Microsoft.AspNetCore.Http.Results..
        /// </summary>
        internal static string Analyzer_DoNotReturnActionResultsFromRouteHandlers_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotReturnActionResultsFromRouteHandlers_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use action results with route handlers.
        /// </summary>
        internal static string Analyzer_DoNotReturnActionResultsFromRouteHandlers_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotReturnActionResultsFromRouteHandlers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ConfigureWebHost cannot be used with WebApplicationBuilder.Host.
        /// </summary>
        internal static string Analyzer_DoNotUseConfigureWebHostWithConfigureHostBuilder_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseConfigureWebHostWithConfigureHostBuilder_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use ConfigureWebHost with WebApplicationBuilder.Host.
        /// </summary>
        internal static string Analyzer_DoNotUseConfigureWebHostWithConfigureHostBuilder_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseConfigureWebHostWithConfigureHostBuilder_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Configure cannot be used with WebApplicationBuilder.WebHost.
        /// </summary>
        internal static string Analyzer_DoNotUseConfigureWithConfigureWebHostBuilder_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseConfigureWithConfigureWebHostBuilder_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use Configure with WebApplicationBuilder.WebHost.
        /// </summary>
        internal static string Analyzer_DoNotUseConfigureWithConfigureWebHostBuilder_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseConfigureWithConfigureWebHostBuilder_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using builder.Logging instead of {0}.
        /// </summary>
        internal static string Analyzer_DoNotUseHostConfigureLogging_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseHostConfigureLogging_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using builder.Logging over Host.ConfigureLogging or WebHost.ConfigureLogging.
        /// </summary>
        internal static string Analyzer_DoNotUseHostConfigureLogging_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseHostConfigureLogging_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using builder.Services instead of {0}.
        /// </summary>
        internal static string Analyzer_DoNotUseHostConfigureServices_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseHostConfigureServices_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using builder.Services over Host.ConfigureServices or WebHost.ConfigureServices.
        /// </summary>
        internal static string Analyzer_DoNotUseHostConfigureServices_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseHostConfigureServices_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} should not be specified for a {1} Delegate parameter.
        /// </summary>
        internal static string Analyzer_DoNotUseModelBindingAttributesOnRouteHandlerParameters_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseModelBindingAttributesOnRouteHandlerParameters_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use model binding attributes with route handlers.
        /// </summary>
        internal static string Analyzer_DoNotUseModelBindingAttributesOnRouteHandlerParameters_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseModelBindingAttributesOnRouteHandlerParameters_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should not be used as a sequence number. Instead, use an integer literal representing source code order..
        /// </summary>
        internal static string Analyzer_DoNotUseNonLiteralSequenceNumbers_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseNonLiteralSequenceNumbers_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use non-literal sequence numbers.
        /// </summary>
        internal static string Analyzer_DoNotUseNonLiteralSequenceNumbers_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseNonLiteralSequenceNumbers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UseStartup cannot be used with WebApplicationBuilder.WebHost.
        /// </summary>
        internal static string Analyzer_DoNotUseUseStartupWithConfigureWebHostBuilder_Message {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseUseStartupWithConfigureWebHostBuilder_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use UseStartup with WebApplicationBuilder.WebHost.
        /// </summary>
        internal static string Analyzer_DoNotUseUseStartupWithConfigureWebHostBuilder_Title {
            get {
                return ResourceManager.GetString("Analyzer_DoNotUseUseStartupWithConfigureWebHostBuilder_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use IHeaderDictionary.Append or the indexer to append or set headers. IDictionary.Add will throw an ArgumentException when attempting to add a duplicate key..
        /// </summary>
        internal static string Analyzer_HeaderDictionaryAdd_Message {
            get {
                return ResourceManager.GetString("Analyzer_HeaderDictionaryAdd_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using IHeaderDictionary.Append or the indexer.
        /// </summary>
        internal static string Analyzer_HeaderDictionaryAdd_Title {
            get {
                return ResourceManager.GetString("Analyzer_HeaderDictionaryAdd_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The header &apos;{0}&apos; can be accessed using the {1} property.
        /// </summary>
        internal static string Analyzer_HeaderDictionaryIndexer_Message {
            get {
                return ResourceManager.GetString("Analyzer_HeaderDictionaryIndexer_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using IHeaderDictionary properties.
        /// </summary>
        internal static string Analyzer_HeaderDictionaryIndexer_Title {
            get {
                return ResourceManager.GetString("Analyzer_HeaderDictionaryIndexer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route handler has multiple parameters with the [FromBody] attribute or a parameter with an [AsParameters] attribute where the parameter type contains multiple members with [FromBody] attributes. Only one parameter can have a [FromBody] attribute..
        /// </summary>
        internal static string Analyzer_MultipleFromBody_Message {
            get {
                return ResourceManager.GetString("Analyzer_MultipleFromBody_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route handler has multiple parameters with the [FromBody] attribute.
        /// </summary>
        internal static string Analyzer_MultipleFromBody_Title {
            get {
                return ResourceManager.GetString("Analyzer_MultipleFromBody_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method used to create a RequestDelegate returns Task&lt;{0}&gt;. RequestDelegate discards this value. If this isn&apos;t intended then change the return type to non-generic Task or, if the delegate is a route handler, cast it to Delegate so the return value is written to the response..
        /// </summary>
        internal static string Analyzer_RequestDelegateReturnValue_Message {
            get {
                return ResourceManager.GetString("Analyzer_RequestDelegateReturnValue_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not return a value from RequestDelegate.
        /// </summary>
        internal static string Analyzer_RequestDelegateReturnValue_Title {
            get {
                return ResourceManager.GetString("Analyzer_RequestDelegateReturnValue_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Route issue: {0}.
        /// </summary>
        internal static string Analyzer_RouteIssue_Message {
            get {
                return ResourceManager.GetString("Analyzer_RouteIssue_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid route pattern.
        /// </summary>
        internal static string Analyzer_RouteIssue_Title {
            get {
                return ResourceManager.GetString("Analyzer_RouteIssue_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; of type {1} should define a bool TryParse(string, IFormatProvider, out {1}) method, or implement IParsable&lt;{1}&gt;.
        /// </summary>
        internal static string Analyzer_RouteParameterComplexTypeIsNotParsable_Message {
            get {
                return ResourceManager.GetString("Analyzer_RouteParameterComplexTypeIsNotParsable_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Complex types referenced by route parameters must be parsable.
        /// </summary>
        internal static string Analyzer_RouteParameterComplexTypeIsNotParsable_Title {
            get {
                return ResourceManager.GetString("Analyzer_RouteParameterComplexTypeIsNotParsable_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused route parameter &apos;{0}&apos;.
        /// </summary>
        internal static string Analyzer_UnusedParameter_Message {
            get {
                return ResourceManager.GetString("Analyzer_UnusedParameter_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused route parameter.
        /// </summary>
        internal static string Analyzer_UnusedParameter_Title {
            get {
                return ResourceManager.GetString("Analyzer_UnusedParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use AddAuthorizationBuilder to register authorization services and construct policies.
        /// </summary>
        internal static string Analyzer_UseAddAuthorizationBuilder_Message {
            get {
                return ResourceManager.GetString("Analyzer_UseAddAuthorizationBuilder_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use AddAuthorizationBuilder.
        /// </summary>
        internal static string Analyzer_UseAddAuthorizationBuilder_Title {
            get {
                return ResourceManager.GetString("Analyzer_UseAddAuthorizationBuilder_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using top level route registrations instead of {0}.
        /// </summary>
        internal static string Analyzer_UseTopLevelRouteRegistrationsInsteadOfUseEndpoints_Message {
            get {
                return ResourceManager.GetString("Analyzer_UseTopLevelRouteRegistrationsInsteadOfUseEndpoints_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suggest using top level route registrations.
        /// </summary>
        internal static string Analyzer_UseTopLevelRouteRegistrationsInsteadOfUseEndpoints_Title {
            get {
                return ResourceManager.GetString("Analyzer_UseTopLevelRouteRegistrationsInsteadOfUseEndpoints_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An empty replacement token (&apos;[]&apos;) is not allowed..
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_EmptyTokenNotAllowed {
            get {
                return ResourceManager.GetString("AttributeRoute_TokenReplacement_EmptyTokenNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Token delimiters (&apos;[&apos;, &apos;]&apos;) are imbalanced..
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_ImbalancedSquareBrackets {
            get {
                return ResourceManager.GetString("AttributeRoute_TokenReplacement_ImbalancedSquareBrackets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A replacement token is not closed..
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_UnclosedToken {
            get {
                return ResourceManager.GetString("AttributeRoute_TokenReplacement_UnclosedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unescaped &apos;[&apos; token is not allowed inside of a replacement token. Use &apos;[[&apos; to escape..
        /// </summary>
        internal static string AttributeRoute_TokenReplacement_UnescapedBraceInToken {
            get {
                return ResourceManager.GetString("AttributeRoute_TokenReplacement_UnescapedBraceInToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path segment that contains more than one section, such as a literal section or a parameter, cannot contain a catch-all parameter..
        /// </summary>
        internal static string TemplateRoute_CannotHaveCatchAllInMultiSegment {
            get {
                return ResourceManager.GetString("TemplateRoute_CannotHaveCatchAllInMultiSegment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A path segment cannot contain two consecutive parameters. They must be separated by a &apos;/&apos; or by a literal string..
        /// </summary>
        internal static string TemplateRoute_CannotHaveConsecutiveParameters {
            get {
                return ResourceManager.GetString("TemplateRoute_CannotHaveConsecutiveParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The route template separator character &apos;/&apos; cannot appear consecutively. It must be separated by either a parameter or a literal value..
        /// </summary>
        internal static string TemplateRoute_CannotHaveConsecutiveSeparators {
            get {
                return ResourceManager.GetString("TemplateRoute_CannotHaveConsecutiveSeparators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The route parameter &apos;{0}&apos; has both an inline default value and an explicit default value specified. A route parameter cannot contain an inline default value when a default value is specified explicitly. Consider removing one of them..
        /// </summary>
        internal static string TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly {
            get {
                return ResourceManager.GetString("TemplateRoute_CannotHaveDefaultValueSpecifiedInlineAndExplicitly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A catch-all parameter cannot be marked optional..
        /// </summary>
        internal static string TemplateRoute_CatchAllCannotBeOptional {
            get {
                return ResourceManager.GetString("TemplateRoute_CatchAllCannotBeOptional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A catch-all parameter can only appear as the last segment of the route template..
        /// </summary>
        internal static string TemplateRoute_CatchAllMustBeLast {
            get {
                return ResourceManager.GetString("TemplateRoute_CatchAllMustBeLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while creating the route with name &apos;{0}&apos; and template &apos;{1}&apos;..
        /// </summary>
        internal static string TemplateRoute_Exception {
            get {
                return ResourceManager.GetString("TemplateRoute_Exception", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal section &apos;{0}&apos; is invalid. Literal sections cannot contain the &apos;?&apos; character..
        /// </summary>
        internal static string TemplateRoute_InvalidLiteral {
            get {
                return ResourceManager.GetString("TemplateRoute_InvalidLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The route parameter name &apos;{0}&apos; is invalid. Route parameter names must be non-empty and cannot contain these characters: &apos;{{&apos;, &apos;}}&apos;, &apos;/&apos;. The &apos;?&apos; character marks a parameter as optional, and can occur only at the end of the parameter. The &apos;*&apos; character marks a parameter as catch-all, and can occur only at the start of the parameter..
        /// </summary>
        internal static string TemplateRoute_InvalidParameterName {
            get {
                return ResourceManager.GetString("TemplateRoute_InvalidParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The route template cannot start with a &apos;~&apos; character unless followed by a &apos;/&apos;..
        /// </summary>
        internal static string TemplateRoute_InvalidRouteTemplate {
            get {
                return ResourceManager.GetString("TemplateRoute_InvalidRouteTemplate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is an incomplete parameter in the route template. Check that each &apos;{&apos; character has a matching &apos;}&apos; character..
        /// </summary>
        internal static string TemplateRoute_MismatchedParameter {
            get {
                return ResourceManager.GetString("TemplateRoute_MismatchedParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An optional parameter cannot have default value..
        /// </summary>
        internal static string TemplateRoute_OptionalCannotHaveDefaultValue {
            get {
                return ResourceManager.GetString("TemplateRoute_OptionalCannotHaveDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the segment &apos;{0}&apos;, the optional parameter &apos;{1}&apos; is preceded by an invalid segment &apos;{2}&apos;. Only a period (.) can precede an optional parameter..
        /// </summary>
        internal static string TemplateRoute_OptionalParameterCanbBePrecededByPeriod {
            get {
                return ResourceManager.GetString("TemplateRoute_OptionalParameterCanbBePrecededByPeriod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An optional parameter must be at the end of the segment. In the segment &apos;{0}&apos;, optional parameter &apos;{1}&apos; is followed by &apos;{2}&apos;..
        /// </summary>
        internal static string TemplateRoute_OptionalParameterHasTobeTheLast {
            get {
                return ResourceManager.GetString("TemplateRoute_OptionalParameterHasTobeTheLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The route parameter name &apos;{0}&apos; appears more than one time in the route template..
        /// </summary>
        internal static string TemplateRoute_RepeatedParameter {
            get {
                return ResourceManager.GetString("TemplateRoute_RepeatedParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In a route parameter, &apos;{&apos; and &apos;}&apos; must be escaped with &apos;{{&apos; and &apos;}}&apos;..
        /// </summary>
        internal static string TemplateRoute_UnescapedBrace {
            get {
                return ResourceManager.GetString("TemplateRoute_UnescapedBrace", resourceCulture);
            }
        }
    }
}
